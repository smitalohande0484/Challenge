1. Create the necessary data structures to contain the data specified in the
Appendix ensuring that data integrity is enforced.



			--Departments Table Structure
			CREATE TABLE DEPT
			(
			 DEPTID        NUMBER(5),
			 DEPTNAME      VARCHAR(50),
			 LOCATION	   VARCHAR(50),
			 CONSTRAINT DEPT_PK PRIMARY KEY(DEPTID)
			);




			--Employees Table Structure
			CREATE TABLE EMP
			(
			 EMPID        NUMBER(10),
			 EMPNAME      VARCHAR(50),
			 JOB_TITLE	  VARCHAR(50),
			 MGR_ID		  NUMBER(10),
			 HIRE_DATE	  DATE,
			 SAL		  NUMBER(10),
			 DEPTID		  NUMBER(5) NOT NULL,
			 CONSTRAINT EMP_PK PRIMARY KEY(EMPID),
			 CONSTRAINT EMP_FK FOREIGN KEY(DEPTID) REFERENCES DEPT(DEPTID)
			);


			


2. Populate the Departments and Employees data structures using the data
specified in the Appendix.

		1.Populating the department table.
		 INSERT INTO DEPT(DEPTID,DEPTNAME,LOCATION)
		 VALUES(1,'Management','London');
		INSERT INTO DEPT(DEPTID,DEPTNAME,LOCATION)
		 VALUES		(2,'Engineering','Cardiff');
		INSERT INTO DEPT(DEPTID,DEPTNAME,LOCATION)
		 VALUES		(3,'Research and Development','Edinburgh');
		INSERT INTO DEPT(DEPTID,DEPTNAME,LOCATION)
		 VALUES		(4,'Sales','Belfast');
				
		2.Populating the employees table.
		INSERT INTO EMP(EMPID,EMPNAME,JOB_TITLE,MGR_ID,HIRE_DATE,SAL,DEPTID)
		 VALUES
				(90001,'John Smith','CEO',null,'01-JAN-1995',100000,1);
		INSERT INTO EMP(EMPID,EMPNAME,JOB_TITLE,MGR_ID,HIRE_DATE,SAL,DEPTID)
		 VALUES		(90002,'Jimmy Willis','Manager',90001,'23-SEP-2003',52500,4);
		INSERT INTO EMP(EMPID,EMPNAME,JOB_TITLE,MGR_ID,HIRE_DATE,SAL,DEPTID)
		 VALUES		(90003,'Roxy Jones','Salesperson',null,'11-FEB-2017',35000,4);
		INSERT INTO EMP(EMPID,EMPNAME,JOB_TITLE,MGR_ID,HIRE_DATE,SAL,DEPTID)
		 VALUES		(90004,'Selwyn Field','Salesperson',null,'20-MAY-2015',32000,4);
		INSERT INTO EMP(EMPID,EMPNAME,JOB_TITLE,MGR_ID,HIRE_DATE,SAL,DEPTID)
		 VALUES		(90005,'David Hallett','Engineer',90006,'17-APR-2018',40000,2);
		INSERT INTO EMP(EMPID,EMPNAME,JOB_TITLE,MGR_ID,HIRE_DATE,SAL,DEPTID)
		 VALUES		(90006,'Sarah Phelps','Manager',90001,'21-MAR-2015',45000,2);
		INSERT INTO EMP(EMPID,EMPNAME,JOB_TITLE,MGR_ID,HIRE_DATE,SAL,DEPTID)
		 VALUES		(90007,'Louise Harper','Engineer',90006,'01-JAN-2013',47000,2);
		INSERT INTO EMP(EMPID,EMPNAME,JOB_TITLE,MGR_ID,HIRE_DATE,SAL,DEPTID)
		 VALUES		(90008,'Tina Hart','Engineer',90009,'28-JUL-2014',45000,3);
		INSERT INTO EMP(EMPID,EMPNAME,JOB_TITLE,MGR_ID,HIRE_DATE,SAL,DEPTID)
		 VALUES		(90009,'Gus Jones','Manager',90001,'15-MAY-2018',50000,3);
		INSERT INTO EMP(EMPID,EMPNAME,JOB_TITLE,MGR_ID,HIRE_DATE,SAL,DEPTID)
		 VALUES		(90010,'Mildred Hall','Secretary',90001,'12-OCT-1996',35000,1);
		
			
			
			
3. Create an appropriate executable database object to allow an Employee to be
created.
		
create or replace 
PROCEDURE EMPINSERT
					(
					 e_name    EMP.EMPNAME%TYPE,
					 e_job     EMP.JOB_TITLE%TYPE,
					 e_mgr     EMP.MGR_ID%TYPE,
					 e_hiredt  EMP.HIRE_DATE%TYPE,
					 e_sal     EMP.SAL%TYPE,
					 e_dep     EMP.DEPTID%TYPE
					 )
			AS
				max_empid number(10);
			BEGIN
				
				--Get the next empid for insertion
				select (max(EMPID)+1) INTO max_empid from EMP; 
				
				dbms_output.put_line('Inserting into Employees table for employee : '||to_char(max_empid));
				
				INSERT INTO EMP(EMPID,EMPNAME,JOB_TITLE,MGR_ID,HIRE_DATE,SAL,DEPTID)
				VALUES (max_empid,e_name,e_job,e_mgr,e_hiredt,e_sal,e_dep);
				
				COMMIT;
			END;


DECLARE
  E_NAME VARCHAR2(50);
  E_JOB VARCHAR2(50);
  E_MGR NUMBER;
  E_HIREDT DATE;
  E_SAL NUMBER;
  E_DEP NUMBER;
BEGIN
  E_NAME := NULL;
  E_JOB := NULL;
  E_MGR := NULL;
  E_HIREDT := NULL;
  E_SAL := NULL;
  E_DEP := NULL;

  EMPINSERT(
    E_NAME => 'David',
    E_JOB => 'Engineer',
    E_MGR => null,
    E_HIREDT => '01-JAN-2001',
    E_SAL => 45000,
    E_DEP => 2
  );
END;


				
			

4. Create an appropriate executable database object to allow the Salary for an
Employee to be increased or decreased by a percentage.


create or replace 
PROCEDURE UPDSAL
					(
					 e_id      EMP.EMPID%TYPE,
					 perc_in   NUMBER
					 )
			AS
				updatedsal NUMBER(10);
				ename      VARCHAR(50);
			BEGIN
				select EMPNAME INTO ename from EMP where EMPID = e_id;
				
				dbms_output.put_line('Updating the salary for employee : '||to_char(e_id) || '-'||ename||' ' ||'by  '|| to_char(perc_in)||' percentage');

				
				UPDATE EMP
				SET SAL = SAL+(SAL*perc_in)/100
				WHERE EMPID = e_id
        			RETURNING SAL
        			INTO updatedsal;
				
				dbms_output.put_line('The new salary of employee '||to_char(e_id)|| '-'||ename||'is ' || to_char(updatedsal));
				
				COMMIT;
			END;

DECLARE
  E_ID NUMBER;
  PERC_IN NUMBER;
BEGIN
  E_ID := 90010;
  PERC_IN := 10;

  UPDSAL(
    E_ID => E_ID,
    PERC_IN => PERC_IN
  );
END;



5. Create an appropriate executable database object to allow the transfer of an
Employee to a different Department.

				create or replace 
			PROCEDURE UPDDEPT
					(
					 e_id        EMP.EMPID%TYPE,
					 newdeptid   NUMBER
					 )
			AS
			
			newdept NUMBER(10);
			dptname varchar(50);
			ename varchar(50);
			
			BEGIN
				select EMPNAME INTO ename from EMP where EMPID = e_id;
				
				dbms_output.put_line('Updating the department for employee : '||to_char(e_id) || '-'||ename);
				
				UPDATE EMP
				SET DEPTID = newdeptid
				WHERE EMPID = e_id
        RETURNING DEPTID
				INTO newdept;
				
				select DEPTNAME into dptname from DEPT where DEPTID = newdept;
				
				dbms_output.put_line('The new department of employee '||to_char(e_id)|| '-'||ename||'is ' ||to_char(newdept)||'-'|| dptname);
				
				COMMIT;
			END;
			
DECLARE
  E_ID NUMBER;
  NEWDEPTID NUMBER;
BEGIN
  E_ID := 90011;
  NEWDEPTID := 4;

  UPDDEPT(
    E_ID => E_ID,
    NEWDEPTID => NEWDEPTID
  );
END;
			


			
6. Create an appropriate executable database object to return the Salary for an
Employee.	


			CREATE OR REPLACE FUNCTION RETSAL
					(
					 e_id  IN  EMP.EMPID%TYPE
					 )
			RETURN NUMBER AS
			sal number(10);
			BEGIN
				SELECT SAL INTO sal FROM EMP where EMPID = e_id;
        		return sal;
			END;
			
	DECLARE
  E_ID NUMBER;
  v_Return NUMBER;
BEGIN
  E_ID := 90011;

  v_Return := RETSAL(
    E_ID => E_ID
  );
   --Legacy output: 
DBMS_OUTPUT.PUT_LINE('v_Return = ' || v_Return);

  --:v_Return := v_Return;
END;
		
			

			
7. Write a report to show all Employees for a Department.

	Select * from EMP where DEPTID = 4;
	

8. Write a report to show the total of Employee Salary for a Department.
	
	Select sum(emp.salary) as total_dept_sal,
			emp.deptid,
			dept.DEPTNAME as department_name
	from EMP
		inner join dept on emp.deptid = dept.deptid
	group by emp.deptid,dept.DEPTNAME;
	
			
			
