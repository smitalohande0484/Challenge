1. Create the necessary data structures to contain the data specified in the
Appendix ensuring that data integrity is enforced.

			--Employees Table Structure
			CREATE TABLE EMP
			(
			 EMPID        NUMBER(10),
			 EMPNAME      VARCHAR(50),
			 JOB_TITLE	  VARCHAR(50),
			 MGR_ID		  NUMBER(10),
			 HIRE_DATE	  DATE,
			 SAL		  NUMBER(10),
			 DEPTID		  NUMBER(5) NOT NULL,
			 CONSTRAINT EMP_PK PRIMARY KEY(EMPID),
			 CONSTRAINT EMP_FK FOREIGN KEY(DEPTID) REFERENCES DEPT(DEPTID)
			);


			--Departments Table Structure
			CREATE TABLE DEPT
			(
			 DEPTID        NUMBER(5),
			 DEPTNAME      VARCHAR(50),
			 LOCATION	   VARCHAR(50),
			 CONSTRAINT DEPT_PK PRIMARY KEY(DEPTID)
			);
			


2. Populate the Departments and Employees data structures using the data
specified in the Appendix.

		1.Populating the department table.
		 INSERT INTO DEPT(DEPTID,DEPTNAME,LOCATION)
		 VALUES(1,'Management','London'),
				(2,'Engineering','Cardiff'),
				(3,'Research and Development','Edinburgh'),
				(4,'Sales','Belfast');
				
		2.Populating the employees table.
		 INSERT INTO EMP(EMPID,EMPNAME,JOB_TITLE,MGR_ID,HIRE_DATE,SAL,DEPTID)
		 VALUES
				(90001,'John Smith','CEO',null,'01/01/1995',100000,1),
				(90002,'Jimmy Willis','Manager',90001,'23/09/2003',52500,4),
				(90003,'Roxy Jones','Salesperson',null,'11/02/2017',35000,4),
				(90004,'Selwyn Field','Salesperson',null,'20/05/2015',32000,4),
				(90005,'David Hallett','Engineer',90006,'17/04/2018',40000,2),
				(90006,'Sarah Phelps','Manager',90001,'21/03/2015',45000,2),
				(90007,'Louise Harper','Engineer',90006,'01/01/2013',47000,2),
				(90008,'Tina Hart','Engineer',90009,'28/07/2014',45000,3),
				(90009,'Gus Jones','Manager',90001,'15/05/2018',50000,3)
				(90010,'Mildred Hall','Secretary',90001,'12/10/1996',35000,1);
		
			
			
3. Create an appropriate executable database object to allow an Employee to be
created.
		
			CREATE OR REPLACE PROCEDURE EMPINSERT
					(
					 e_name    EMP.EMPNAME%TYPE,
					 e_job     EMP.JOB_TITLE%TYPE,
					 e_mgr     EMP.MGR_ID%TYPE,
					 e_hiredt  EMP.HIRE_DATE%TYPE,
					 e_sal     EMP.SAL%TYPE,
					 e_dep     EMP.DEPTID%TYPE
					 )
			AS
				max_empid number(10);
			BEGIN
				
				--Get the next empid for insertion
				select (max(EMPID)+1) INTO max_empid from EMP; 
				
				dbms_output.put_line('Inserting into Employees table for employee : '||to_char(max_empid));
				
				INSERT INTO EMP(EMPID,EMPNAME,JOB_TITLE,MGR_ID,HIRE_DATE,SAL,DEPTID)
				VALUES (max_empid,e_name,e_job,e_mgr,e_hiredt,e_sal,e_dep);
				
				COMMIT;
			END;


				
			

4. Create an appropriate executable database object to allow the Salary for an
Employee to be increased or decreased by a percentage.


			CREATE OR REPLACE PROCEDURE UPDSAL
					(
					 e_id      EMP.EMPID%TYPE,
					 perc_in   NUMBER
					 )
			AS
				updatedsal NUMBER(10);
				ename      VARCHAR(50);
			BEGIN
				select EMPNAME INTO ename from EMP where EMPID = e_id;
				
				dbms_output.put_line('Updating the salary for employee : '||to_char(e_id) || '-'||ename||' ' ||'by  '|| to_char(perc_in)||' percentage');

				
				UPDATE EMP
				SET SAL = SAL+(SAL*perc_in)/100;
				RETURNING SAL
				INTO updatedsal
				WHERE EMPID = e_id;
				
				dbms_output.put_line('The new salary of employee '||to_char(e_id)|| '-'||ename||'is ' || to_char(updatedsal));
				
				COMMIT;
			END;




5. Create an appropriate executable database object to allow the transfer of an
Employee to a different Department.

			CREATE OR REPLACE PROCEDURE UPDDEPT
					(
					 e_id        EMP.EMPID%TYPE,
					 newdeptid   NUMBER
					 )
			AS
			
			newdept NUMBER(10);
			dptname varchar(50);
			ename varchar(50);
			
			BEGIN
				select EMPNAME INTO ename from EMP where EMPID = e_id;
				
				dbms_output.put_line('Updating the department for employee : '||to_char(e_id) || '-'||ename);
				
				UPDATE EMP
				SET DEPTID = newdeptid;
				RETURNING DEPTID
				INTO newdept
				WHERE EMPID = e_id;
				
				select DEPTNAME into dptname from DEPT where DEPTID = newdept;
				
				dbms_output.put_line('The new department of employee '||to_char(e_id)|||| '-'||ename||'is ' ||to_char(newdept)||'-'|| dptname);
				
				COMMIT;
			END;


			
6. Create an appropriate executable database object to return the Salary for an
Employee.	


			CREATE OR REPLACE PROCEDURE UPDDEPT
					(
					 e_id  IN OUT    EMP.EMPID%TYPE,
					 e_sal OUT NUMBER(10)
					 )
			AS
			
			BEGIN
				SELECT SAL,EMPID INTO e_sal,e_id FROM EMP where EMPID = e_id;
			END;
			
			
			

			
7. Write a report to show all Employees for a Department.

	Select * from EMP where DEPTID = 4;
	

8. Write a report to show the total of Employee Salary for a Department.
	
	Select sum(emp.salary) as total_dept_sal,
			emp.deptid,
			dept.DEPTNAME as department_name
	from EMP
		inner join dept on emp.deptid = dept.deptid
	group by emp.deptid,dept.DEPTNAME;
	
			
			
